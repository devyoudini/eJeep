import { useAuth } from "@/auth/AuthenticationContext";
import { height, jeepUri, statusBar, userUri } from "@/constants/dimension";
import { database } from "@/firebaseConfig/firebase";
import { getUsersLocation } from "@/utils/location";
import { Ionicons } from "@expo/vector-icons";
import { off, onDisconnect, onValue, ref, update } from "firebase/database";
import React, { useEffect, useRef, useState } from "react";
import {
  Animated,
  SafeAreaView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";
import { SheetManager } from "react-native-actions-sheet";
import MapView, {
  Animated as AnimatedMap,
  Marker,
  MarkerAnimated,
  PROVIDER_GOOGLE,
} from "react-native-maps";
import PermissionPage from "./app/(home)/permission";

interface Marker {
  userId: string;
  latitude: number;
  longitude: number;
  role: string;
}

const Home = () => {

  const mapRef = useRef<MapView | undefined>(undefined);
  const [userDatas, setUserDatas] = useState<Marker[]>([]);

  useEffect(() => {
    if (!locationEnabled) {
      return;
    }

    const getData = async () => {
      const locationRef = ref(database, "locations/");
      const userLocationRef = ref(database, `locations/${user?.uid}`);

      // Get user's initial location
      const usersInitialLocation = await getUsersLocation();

      const onDataChange = (snap: { val: () => { [key: string]: Marker } }) => {
        const data = snap.val();

        const markersArray: Marker[] = Object.values(data || {});
        setUserDatas(markersArray);
      };
      await onValue(locationRef, onDataChange);

      // Set the user's initial location on connection
      update(userLocationRef, usersInitialLocation);

      // Setup onDisconnect operation to remove user's location on disconnection
      const onDisconnectRef = ref(database, `locations/`);
      onValue(onDisconnectRef, (snapshot) => {
        if (snapshot.val() === false) {
          // User has disconnected
          onDisconnect(onDisconnectRef).remove();
          console.log("User disconnected. Removing location.");
          off(locationRef, "value", onDataChange);
        }
      });

      return () => {
        off(locationRef, "value", onDataChange);
        off(onDisconnectRef);
      };
    };

    getData();
  }, [locationEnabled]);

  const onUserLocation = () => {
    getUsersLocation().then((value) => {
      mapRef.current?.animateCamera(
        {
          center: {
            latitude: value.latitude,
            longitude: value.longitude,
          },
          zoom: 15,
        },
        {
          duration: 1000,
        }
      );
    });
  };

  const coordsExist = (lat: number, long: number) => {
    if (lat == null || long == null) {
      return false;
    } else {
      return true;
    }
  };

  return (
    <SafeAreaView style={{ flex: 1 }}>
      {locationEnabled ? (
        <View style={styles.mapContainer}>
          <AnimatedMap
            // @ts-ignore
            ref={mapRef}
            provider={PROVIDER_GOOGLE}
            mapPadding={{
              bottom: 20,
              left: 10,
              right: 10,
              top: 50,
            }}
            userLocationPriority={"high"}
            showsIndoors
            zoomControlEnabled={false}
            style={styles.map}
            loadingEnabled={true}
            loadingIndicatorColor="black"
            loadingBackgroundColor="white"
            showsUserLocation={true}
            userLocationUpdateInterval={5000}
            onUserLocationChange={async () => {
              await getUsersLocation().then(async (value) => {
                await update(ref(database, `locations/${user?.uid}`), {
                  latitude: value.latitude,
                  longitude: value.longitude,
                }); 
              });
            }}
            showsTraffic={true}
            showsBuildings={true}
            showsIndoorLevelPicker={true}
            paddingAdjustmentBehavior="always"
            showsMyLocationButton={false}
            showsCompass={false}
            onMapLoaded={() => {
              setTimeout(() => {
                onUserLocation();
              }, 1000);
            }}
          >
            {userDatas.map((marker, index) =>
              marker.userId === user?.uid ||
              !coordsExist(marker.latitude, marker.longitude) ? null : (
                <MarkerAnimated
                  key={index}
                  coordinate={{
                    latitude: new Animated.Value(marker.latitude),
                    longitude: new Animated.Value(marker.longitude),
                  }}
                  //@ts-ignore
                  // ref={markerRef}
                  onPress={() => {
                    console.log(marker);
                  }}
                  image={{ uri: marker.role === "Driver" ? jeepUri : userUri }}
                  style={{ elevation: 4 }}
                />
              )
            )}
          </AnimatedMap>

          <TouchableOpacity
            style={styles.position}
            onPress={async () => {
              onUserLocation();
            }}
          >
            <Ionicons name="locate" size={24} />
          </TouchableOpacity>
        </View>
      ) : (
        <PermissionPage />
      )}

      <View style={styles.content}>
        <Text style={{ fontSize: 18, fontWeight: "bold" }}>Nearby</Text>
      </View>
      {/* menu icon */}
      <TouchableOpacity
        onPress={() => {
          SheetManager.show("signoutSheet");
        }}
        style={styles.menu}
      >
        <Ionicons
          name="menu"
          size={24}
          color="black"
          // style={{ marginTop: 1 }}
        />
      </TouchableOpacity>

      {/* <View style={styles.container}></View> */}
    </SafeAreaView>
  );
};

export default Home;

const styles = StyleSheet.create({
  map: {
    // width: "100%",
    // height: "100%",
    ...StyleSheet.absoluteFillObject,
  },
  menu: {
    position: "absolute",
    top: statusBar ? statusBar + 20 : 55,
    left: 20,
    backgroundColor: "white",
    width: 40,
    height: 40,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 99,
    elevation: 10,
  },
  position: {
    position: "absolute",
    bottom: 40,
    right: 20,
    padding: 20,
    backgroundColor: "white",
    borderRadius: 99,
    elevation: 10,
  },
  mapContainer: {
    flex: 1,
  },
  content: {
    marginTop: -20,
    zIndex: 999,
    height: height * 0.4,
    backgroundColor: "#fff",
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    alignItems: "center",
    elevation: 10,
    paddingTop: 10,
  },
});
